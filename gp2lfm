#!/bin/bash

#google play to lastfm
#runs in the folder with gplay data downloads and modifies the data accordingly

#set size to make files toupload
uploadsize=3000

if [[ -z $1 ]]; then
    outputdir=outputdir
else
    outputdir=$1
fi

rm -rf $outputdir
touch outputfile; rm outputfile
mkdir $outputdir

songcount=0
linecount=0

#for each file...
for file in *.csv; do

    #count how many songs are processed
    songcount=$((songcount + 1))
    
    line=$(awk 'NR >= 2 { print }' < "$file") #assign second line of the file to variable

    #create file that has one of each line
    echo $line >> 1_allsongs
    
    #create file that we will be working with
    #complex parse - extract playcount
    playcount=$(gawk '
    BEGIN {
        FPAT = "([^,]+)|(\"[^\"]+\")" #complex delimiter stuff
        OFS = "," #output field seperator
    }
    {
    if ($1 != "Title") # Do not forget to skip the header line! - does this work for songs that are titled Title?
    {         
        #title=$1
        #album=$2
        #artist=$3
        #durationms=$4
        playcount=$6        
        
        #print out to variable
        { print playcount}
    }
    }
    END {
        {}
    }
    ' "$file")
    
    #playcount be like
    pc=$playcount
    pc="${pc%\"}"
    pc="${pc#\"}"
    
    #TODO remove leading and trailing quotations
    line="${line%\"}"
    line="${line#\"}"
    
    #append line to file
    while [[ $pc > 0 ]]; do
        linecount=$((linecount + 1))
        
        echo $line >> outputfile
        pc=$(($pc - 1))
    done
done

echo songs: $songcount
echo lines: $linecount

#move to specified directory where all the file processing will be
mv 1_allsongs ${outputdir}"/1_allsongs"
mv outputfile ${outputdir}"/outputfile"
cd outputdir

#for loop for all this sed stuff?
declare -a toreplace=("\",\"" #first is the delimiter "," to utf8 null
                     "&#39;"
                     "&quot;"
                     "&amp;"
                     "&gt;"
                     "&lt;"
                     #add more lines if you want **USE � as DELIMITER SINCE THAT HAS BEEN CHANGED ABOVE ALREADY**
                     )
declare -a replacewith=("�" #might have to use output of printf '\x00' to create null char? or this is good enough maybe? TO USE ANOTHER CHAR USE THE UTF8 CODE: $(printf '\x01') <-- USE THIS IF YOUR SONGS HAVE � in the title, 
                     "'"                                    #only dif is dolphin filebroswer doesnt like it as much. just gotta "open with" and select program if u wanna open it. Already had to do that in windows since i dont use
                     "\""                                   #file extensions so idk if it makes a difference there. Either way it will work perfectly in scrubbler so its no biggie. note this might change further substitutions -thats why i use �
                     "\&"
                     ">"
                     "<"
                     #add more lines if you want - can do  custom formatting here. Replace "Arianna Grande" with "Meshuggah
                     )
arraylength=${#toreplace[@]}
i=0
while [ $i -lt $arraylength ]; do {
    sed -i "s/${toreplace[i]}/${replacewith[i]}/g" outputfile
    echo replaced "${toreplace[i]}" with "${replacewith[i]}"
    ((i++))
} done

echo "fixed formatting in outputfile"

#TODO rename these files so they are in nomenclature - nvm fuck it itll just be called outputfile all the way through. if you wanna check a step then add the line yourself, everything works now
#remove podcasts or whatever
declare -a todelete=("default thing to delete yo, I hope you don't have a song with this name"
                     #"Replace"
                     #"And Uncomment"
                     #"These Strings"
                     )

for shittodelete in "${todelete[@]}"; do {
    echo "seperating $shittodelete ... lines moved: "
    grep -i "$shittodelete" outputfile | wc -l
    
    grep -v -i "$shittodelete" outputfile > temp         #takes the songs that do not have the string defined above
    grep -i "$shittodelete" outputfile >> removedlines   #adds the lines that have the filtered words to new file
    mv temp outputfile                                   #overwrite previous file with the new filtered one. can change 'mv' to 'cp' if you want to check intermediate temp file
    
} done

#command line output
linenum=$(wc -l < outputfile)
echo "Total number of lines: $linenum"
num=$((($(($linenum-1))/$uploadsize)+1))
echo "This will take $num days to upload"

#cut this file into files of specified length (default 3000)
mkdir -p toupload
split outputfile "toupload_" -l $(($uploadsize)) -d
for file in toupload_*; do
    mv $file "toupload/$file.csv"
done

##more management
#sort -k4 -n -t, outputfile > lengthsort #sorts the code based on song length if you want to know - i just used this to help with my spotify code descision making



